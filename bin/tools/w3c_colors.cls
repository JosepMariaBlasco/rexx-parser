#!/usr/bin/env rexx
-- 'w3c_colors.cls' (this package) generated on 2025-06-03T13:37:03.432000
/*
   Purpose: ease using and converting HTML and SVG color names taking advantage of the
            public class

   Generated by: parse_and_create_w3c_colors.rex

   Usage:   require 'w3c_colors.cls' and use its public class .W3C_Colors with the following class methods

            .W3C_Colors~getColorNameFromHex(someHexValue) ... returns mixed case name or .nil, if hex unknown
               someHexValue either "#rrggbb" or "#rgb"

            .W3C_Colors~getColorNameFromRGB(someRgbValue) ... returns mixed case name or .nil, if rgb unknown
               someRgbValue either "rgb(r,g,b)"
            .W3C_Colors~getColorNameFromRGB(r, g, b)      ... returns mixed case name or .nil, if rgb unknown
               r, g, b ... decimal value between 0 and 255 for red, green blue

            .W3C_Colors~getMixedCaseName(someColorName)   ... returns mixed case name or .nil, if name unknown
            .W3C_Colors~getHexValue(someColorName)        ... returns "#rrggbb" or .nil, if name unknown
            .W3C_Colors~getRgbValue(someColorName)        ... returns "rgb(r,g,b)" or .nil, if name unknown
            .W3C_Colors~isSvgColorName(someColorName)     ... returns .true if name is a SVG name,
                                                                      .false if name is not a SVG name ("RebeccaPurple")
                                                                      or .nil, if name unknown
   Author:  Rony G. Flatscher, Josep Maria Blasco (c) 2025
   License: AL 2.0
   Date:    2025-06-05
   Version: 1.2
*/

-- to run the following demo enter the command: "rexx w3c_colors.cls someArg" (any argument)
if arg()>0 then
do
   do counter c1 val over ('indigo','#4b0082','rgb( 75,  0,130)'), -
                          ('rebeccapurple',"#663399", "rgb(102, 51,153)"), -
                          ('rebeccapurple',"#639"   , "rgb(102, 51,153)"), -
                          ('NavajoWhite', '#ffdead', (255, 222, 173)),      /*
                             the following hex values have duplicate names: */ -
                          ("aqua", "#0ff", "rgb(  0,255,255)"), ("cyan", "#00ffff", "rgb(  0,255,255)"), -
                          ("fuchsia", "#f0f", "rgb(255,  0,255)"), ("magenta", "#ff00ff", "rgb(255,  0,255)"), -
                          ("LightSlateGray", "#789", "rgb(119,136,153)"), ("LightSlateGrey", "#778899", "rgb(119,136,153)")

      name=val[1]
      hex =val[2]
      rgb =val[3]
      if rgb~isA(.array) then strRgb=rgb~toString(,',')
                         else strRgb=rgb
      say "- round #" c1":" "testing color:" name "hex="hex "rgb="strRgb
      say
      hint=""
      if hex~length=4 then hint=" --> note: hex value has only three hex digits"
         -- also accepts single hexadecimal numbers per color: "#rgb" ("#rrggbb" gets looked up)
      sp="  "
      say sp ".W3C_Colors~getColorNameFromHex("""hex""")"hint":"
      say sp "  " hex":" .W3C_Colors~getColorNameFromHex(hex)
      say sp "  " hex~upper":" .W3C_Colors~getColorNameFromHex(hex~upper) "(key: hex~upper)"
      say
         -- either "rgb(r,g,b)" or three arguments of "r,g,b"
      say sp ".W3C_Colors~getColorNameFromRGB("""strRgb"""):"
      if rgb~isA(.array) then
      do
         colorName=.W3C_Colors~getColorNameFromRGB(rgb[1], rgb[2], rgb[3])
         rgb=rgb[1]","rgb[2]","rgb[3]
      end
      else
         colorName=.W3C_Colors~getColorNameFromRGB(rgb)
      say sp "  " rgb":" colorName
      say sp "  " rgb~upper":" .W3C_Colors~getColorNameFromRGB(rgb~upper) "(key: rgb~upper)"
      say
      say sp ".W3C_Colors~getMixedCaseName(name="""name"""):"
      say sp "  " name":" .W3C_Colors~getMixedCaseName(name)
      say sp "  " name~upper":" .W3C_Colors~getMixedCaseName(name~upper) "(key: name~upper)"
      say
      say sp ".W3C_Colors~getHexValue(name="""name"""):"
      say sp "  " name":" .W3C_Colors~getHexValue(name)
      say sp "  " name~upper":" .W3C_Colors~getHexValue(name~upper) "(key: name~upper)"
      say
      say sp ".W3C_Colors~getRgbValue(name="""name"""):"
      say sp "  " name":" .W3C_Colors~getRgbValue(name)
      say sp "  " name~upper":" .W3C_Colors~getRgbValue(name~upper) "(key: name~upper)"
      say
      say sp ".W3C_Colors~isSvgColorName(name="""name"""):" (name="rebeccapurple")~?("(not a SVG colorname!)","")
      say sp "  " name":" .W3C_Colors~isSvgColorName(name)
      say sp "  " name~upper":" .W3C_Colors~isSvgColorName(name~upper) "(key: name~upper)"
      say
   end

   Parse Arg color percent
   if datatype(percent,num) then
   do
      Say "-------------------"
      say ".W3C_Colors~nearestEuclidean(color="color", percent="percent")"
      say
      .W3C_Colors~nearestEuclidean( color, percent )
      Say "-------------------"
      say ".W3C_Colors~nearestCIELab(color="color", percent="percent")"
      say
      .W3C_Colors~nearestCIELab( color, percent )
   end
end


/* ========================================================================= */

::Requires "cielab.cls" NameSpace CIELAB     -- requires 'rxmath' library, hence available to us

/* Process color argument, return blank delimited decimal values "r g b".
   @param  colorArg #hex, hex, rgb(r,g,b), colorName
   @return blank delimited rgb decimal value
*/
::routine processColorArg
  parse upper arg colorArg

  If colorArg[1] = "#" Then colorArg = SubStr(colorArg, 2) -- Allow "abc" and "#abc", etc.
  if datatype(colorArg, 'X') then
  do
     If Length(colorArg) = 3 Then Do
       Parse Var colorArg a +1 b +1 c +1
       colorArg = Space( a a b b c c, 0 )
     End
     parse var colorArg r +2 g +2 b +2
     return r~x2d g~x2d b~x2d
  end

  rgb=.w3c_colors~getRgbValue(colorArg)   --  a colorName in hand?
  if rgb\==.nil then colorArg=rgb~upper

  if colorArg~startsWith('RGB(') then
  do
     parse caseless var colorArg 'RGB(' r ',' g ',' b ')'
     return space(r g b, 1)
  end

  -- invalid argument
  raise syntax 40.904 array ("processColorArg", 1, "#hex, hex, rgb(r,g,b), colorname", arg(1))


/* Utility class to ease conversion between HTML color names and their hex and rgb values. */
::class  W3C_Colors  public   -- maintain W3C (HTML, also SVG) color names with their hex and rgb values

::Method nearestEuclidean Class
  Expose clrName2all
  Use Arg hex, percent = 10

  rgb=processColorArg(hex)
  parse var rgb x1 y1 z1

  maxDistance = RxCalcSqrt( 3 * 255**2 )
  colorName = .w3c_colors~getColorNameFromRGB(x1, y1, z1)
  str = "Computing nearest W3C colors to '"arg(1)"'"
  if colorName \== .nil then str = str "('"colorName"')"
  Say str "with a" percent~strip "% Euclidean percent accuracy:"

  Do With Item item Over clrName2all
    Parse Value item[2] With +1 x2 +2 y2 +2 z2 +2
    x2 = X2D(x2)
    y2 = X2D(y2)
    z2 = X2D(z2)

    distance = RxCalcSqrt( (x2-x1)**2 + (y2-y1)**2 + (z2-z1) **2 )

    If distance / maxDistance < percent / 100 Then Do
      Say "Found" Left(item[1],21)": Distance=" Format(distance,3,2) "("Pct(distance, maxDistance)")" -
        "[R:" Dim(Abs(x2-x1))", G:" Dim(Abs(y2-y1))", B:" Dim(Abs(z2-z1)) "]"
    End
  End
  Exit

Dim: Return Right(Arg(1),3) "("Pct(Arg(1),256)")"
Pct: Return Format(Arg(1)*100/Arg(2),3,2)"%"

::Method nearestCIELAB Class
  Expose clrName2all
  Use Arg hex, maxDistance = 18 -- Minimum noticeable difference is around 3

  rgb=processColorArg(hex)
  parse var rgb x1 y1 z1

  colorName = .w3c_colors~getColorNameFromRGB(x1, y1, z1)
  str = "Computing W3C colors nearest to '"arg(1)"'"
  if colorName \== .nil then str = str "('"colorName"')"
  Say str "with a CIE Î”E* distance of up to" maxDistance~strip
  Say

  Do With Item item Over clrName2all
    Parse Value item[2] With +1 x2 +2 y2 +2 z2 +2
    x2 = X2D(x2)
    y2 = X2D(y2)
    z2 = X2D(z2)

    distance = CIELAB:DeltaE( x1 y1 z1, x2 y2 z2 )

    If distance <= maxDistance Then Do
      Say "Found" Left(item[1],21)"["item[2]"]: Distance=" Format(distance,3,2)
    End
  End

::method init        class
  expose clrName2all hex2colorName rgb2colorName
  -- creates four StringTables to manage HTML and SVG color names
  clrName2all        = .stringTable~new   -- COLORNAME -> [properName,hex,rgb,svg_rgb]
  self~fillStringTables       -- fill the string tables

      /* create two additional utility StringTables for support hex->colorName and rgb->colorName,
         duplicate W3C colornames for same hex value:
         #00ffff -> Aqua, Cyan: return Cyan in getColorNameFromHex|Rgb()
         #ff00ff -> Fuchsia, Magenta: return Magenta in getColorNameFromHex|Rgb()
         #778899 -> LightSlateGray, LightSlateGrey: return LightSlateGrey in getColorNameFromHex|Rgb()
      */

  hex2colorName = .stringTable~new
  rgb2colorName = .stringTable~new
  do colorName over clrName2all
     mixedColorName=clrName2all[colorName][1]

     hex=clrName2all[colorName][2]
     -- hex2colorName[hex      ]=mixedColorName
     if wordPos(mixedColorName, "Aqua Fuchsia LightSlateGray")=0 then
     do
        hex2colorName[hex~upper]=mixedColorName
        rgb=clrName2all[colorName][3]
        -- rgb2colorName[rgb~space(0)      ]=mixedColorName
     end
     rgb2colorName[rgb~space(0)~upper]=mixedColorName
  end


::method getColorNameFromHex  class -- return color name in mixed case, or .nil if not defined
  expose hex2colorName
  parse upper arg hex .
  hex=hex~space(0)
  if hex~length=4 then     -- something like #abc instead of #aabbcc
  do
     parse var hex x +1 r +1 g +1 b +1
     hex=x || r || r || g || g || b || b
  end
  return hex2colorName[hex]

::method getColorNameFromRGB  class -- return color name in mixed case, or .nil if not defined
  expose rgb2colorName
  if arg()=3 then
  do
     use strict arg r, g, b
     rgb="RGB("r","g","||b")"
  end
  else
     parse upper arg rgb
  return rgb2colorName[rgb~space(0)]

::method getMixedCaseName  class    -- returns mixed case name for the color name, or .nil if not defined
  expose clrName2all
  parse upper arg colorName .
  arr=clrName2all[colorName]
  if arr==.nil then return .nil     -- unknown color
  return arr[1]

::method getHexValue class          -- returns the hex value for the color name "#rrggbb", or .nil if not defined
  expose clrName2all
  parse upper arg colorName .
  arr=clrName2all[colorName]
  if arr==.nil then return .nil     -- unknown color
  return arr[2]

::method getRgbValue class          -- returns the rgb value for the color name "rgb(r, g, b)", or .nil if not defined
  expose clrName2all
  parse upper arg colorName .
  arr=clrName2all[colorName]
  if arr==.nil then return .nil     -- unknown color
  return arr[3]

   -- note: SVG does not have the HTML color name "REBECCAPURPLE" defined
::method isSvgColorName class       -- returns .true, if color is an SVG color, .false else (has no RebeccaPurple), or .nil if not defined
  expose clrName2all
  parse upper arg colorName .
  arr=clrName2all[colorName]
  if arr==.nil then return .nil     -- unknown color
  return arr[4]

::method fillStringTables  class private  -- code will be created and appended by this utility, or .nil if not defined
  expose clrName2all

  -- HTML color definitions: COLORNAME -> .array~of(mixedColorName, hex, rgb, isSVGcolorname)

     clrName2all["ALICEBLUE"           ] = ("AliceBlue"           , "#f0f8ff", "rgb(240,248,255)", .true )
     clrName2all["ANTIQUEWHITE"        ] = ("AntiqueWhite"        , "#faebd7", "rgb(250,235,215)", .true )
     clrName2all["AQUA"                ] = ("Aqua"                , "#00ffff", "rgb(  0,255,255)", .true )
     clrName2all["AQUAMARINE"          ] = ("Aquamarine"          , "#7fffd4", "rgb(127,255,212)", .true )
     clrName2all["AZURE"               ] = ("Azure"               , "#f0ffff", "rgb(240,255,255)", .true )
     clrName2all["BEIGE"               ] = ("Beige"               , "#f5f5dc", "rgb(245,245,220)", .true )
     clrName2all["BISQUE"              ] = ("Bisque"              , "#ffe4c4", "rgb(255,228,196)", .true )
     clrName2all["BLACK"               ] = ("Black"               , "#000000", "rgb(  0,  0,  0)", .true )
     clrName2all["BLANCHEDALMOND"      ] = ("BlanchedAlmond"      , "#ffebcd", "rgb(255,235,205)", .true )
     clrName2all["BLUE"                ] = ("Blue"                , "#0000ff", "rgb(  0,  0,255)", .true )
     clrName2all["BLUEVIOLET"          ] = ("BlueViolet"          , "#8a2be2", "rgb(138, 43,226)", .true )
     clrName2all["BROWN"               ] = ("Brown"               , "#a52a2a", "rgb(165, 42, 42)", .true )
     clrName2all["BURLYWOOD"           ] = ("BurlyWood"           , "#deb887", "rgb(222,184,135)", .true )
     clrName2all["CADETBLUE"           ] = ("CadetBlue"           , "#5f9ea0", "rgb( 95,158,160)", .true )
     clrName2all["CHARTREUSE"          ] = ("Chartreuse"          , "#7fff00", "rgb(127,255,  0)", .true )
     clrName2all["CHOCOLATE"           ] = ("Chocolate"           , "#d2691e", "rgb(210,105, 30)", .true )
     clrName2all["CORAL"               ] = ("Coral"               , "#ff7f50", "rgb(255,127, 80)", .true )
     clrName2all["CORNFLOWERBLUE"      ] = ("CornflowerBlue"      , "#6495ed", "rgb(100,149,237)", .true )
     clrName2all["CORNSILK"            ] = ("Cornsilk"            , "#fff8dc", "rgb(255,248,220)", .true )
     clrName2all["CRIMSON"             ] = ("Crimson"             , "#dc143c", "rgb(220, 20, 60)", .true )
     clrName2all["CYAN"                ] = ("Cyan"                , "#00ffff", "rgb(  0,255,255)", .true )
     clrName2all["DARKBLUE"            ] = ("DarkBlue"            , "#00008b", "rgb(  0,  0,139)", .true )
     clrName2all["DARKCYAN"            ] = ("DarkCyan"            , "#008b8b", "rgb(  0,139,139)", .true )
     clrName2all["DARKGOLDENROD"       ] = ("DarkGoldenRod"       , "#b8860b", "rgb(184,134, 11)", .true )
     clrName2all["DARKGRAY"            ] = ("DarkGray"            , "#a9a9a9", "rgb(169,169,169)", .true )
     clrName2all["DARKGREEN"           ] = ("DarkGreen"           , "#006400", "rgb(  0,100,  0)", .true )
     clrName2all["DARKGREY"            ] = ("DarkGrey"            , "#a9a9a9", "rgb(169,169,169)", .true )
     clrName2all["DARKKHAKI"           ] = ("DarkKhaki"           , "#bdb76b", "rgb(189,183,107)", .true )
     clrName2all["DARKMAGENTA"         ] = ("DarkMagenta"         , "#8b008b", "rgb(139,  0,139)", .true )
     clrName2all["DARKOLIVEGREEN"      ] = ("DarkOliveGreen"      , "#556b2f", "rgb( 85,107, 47)", .true )
     clrName2all["DARKORANGE"          ] = ("DarkOrange"          , "#ff8c00", "rgb(255,140,  0)", .true )
     clrName2all["DARKORCHID"          ] = ("DarkOrchid"          , "#9932cc", "rgb(153, 50,204)", .true )
     clrName2all["DARKRED"             ] = ("DarkRed"             , "#8b0000", "rgb(139,  0,  0)", .true )
     clrName2all["DARKSALMON"          ] = ("DarkSalmon"          , "#e9967a", "rgb(233,150,122)", .true )
     clrName2all["DARKSEAGREEN"        ] = ("DarkSeaGreen"        , "#8fbc8f", "rgb(143,188,143)", .true )
     clrName2all["DARKSLATEBLUE"       ] = ("DarkSlateBlue"       , "#483d8b", "rgb( 72, 61,139)", .true )
     clrName2all["DARKSLATEGRAY"       ] = ("DarkSlateGray"       , "#2f4f4f", "rgb( 47, 79, 79)", .true )
     clrName2all["DARKSLATEGREY"       ] = ("DarkSlateGrey"       , "#2f4f4f", "rgb( 47, 79, 79)", .true )
     clrName2all["DARKTURQUOISE"       ] = ("DarkTurquoise"       , "#00ced1", "rgb(  0,206,209)", .true )
     clrName2all["DARKVIOLET"          ] = ("DarkViolet"          , "#9400d3", "rgb(148,  0,211)", .true )
     clrName2all["DEEPPINK"            ] = ("DeepPink"            , "#ff1493", "rgb(255, 20,147)", .true )
     clrName2all["DEEPSKYBLUE"         ] = ("DeepSkyBlue"         , "#00bfff", "rgb(  0,191,255)", .true )
     clrName2all["DIMGRAY"             ] = ("DimGray"             , "#696969", "rgb(105,105,105)", .true )
     clrName2all["DIMGREY"             ] = ("DimGrey"             , "#696969", "rgb(105,105,105)", .true )
     clrName2all["DODGERBLUE"          ] = ("DodgerBlue"          , "#1e90ff", "rgb( 30,144,255)", .true )
     clrName2all["FIREBRICK"           ] = ("FireBrick"           , "#b22222", "rgb(178, 34, 34)", .true )
     clrName2all["FLORALWHITE"         ] = ("FloralWhite"         , "#fffaf0", "rgb(255,250,240)", .true )
     clrName2all["FORESTGREEN"         ] = ("ForestGreen"         , "#228b22", "rgb( 34,139, 34)", .true )
     clrName2all["FUCHSIA"             ] = ("Fuchsia"             , "#ff00ff", "rgb(255,  0,255)", .true )
     clrName2all["GAINSBORO"           ] = ("Gainsboro"           , "#dcdcdc", "rgb(220,220,220)", .true )
     clrName2all["GHOSTWHITE"          ] = ("GhostWhite"          , "#f8f8ff", "rgb(248,248,255)", .true )
     clrName2all["GOLD"                ] = ("Gold"                , "#ffd700", "rgb(255,215,  0)", .true )
     clrName2all["GOLDENROD"           ] = ("GoldenRod"           , "#daa520", "rgb(218,165, 32)", .true )
     clrName2all["GRAY"                ] = ("Gray"                , "#808080", "rgb(128,128,128)", .true )
     clrName2all["GREEN"               ] = ("Green"               , "#008000", "rgb(  0,128,  0)", .true )
     clrName2all["GREENYELLOW"         ] = ("GreenYellow"         , "#adff2f", "rgb(173,255, 47)", .true )
     clrName2all["GREY"                ] = ("Grey"                , "#808080", "rgb(128,128,128)", .true )
     clrName2all["HONEYDEW"            ] = ("HoneyDew"            , "#f0fff0", "rgb(240,255,240)", .true )
     clrName2all["HOTPINK"             ] = ("HotPink"             , "#ff69b4", "rgb(255,105,180)", .true )
     clrName2all["INDIANRED"           ] = ("IndianRed"           , "#cd5c5c", "rgb(205, 92, 92)", .true )
     clrName2all["INDIGO"              ] = ("Indigo"              , "#4b0082", "rgb( 75,  0,130)", .true )
     clrName2all["IVORY"               ] = ("Ivory"               , "#fffff0", "rgb(255,255,240)", .true )
     clrName2all["KHAKI"               ] = ("Khaki"               , "#f0e68c", "rgb(240,230,140)", .true )
     clrName2all["LAVENDER"            ] = ("Lavender"            , "#e6e6fa", "rgb(230,230,250)", .true )
     clrName2all["LAVENDERBLUSH"       ] = ("LavenderBlush"       , "#fff0f5", "rgb(255,240,245)", .true )
     clrName2all["LAWNGREEN"           ] = ("LawnGreen"           , "#7cfc00", "rgb(124,252,  0)", .true )
     clrName2all["LEMONCHIFFON"        ] = ("LemonChiffon"        , "#fffacd", "rgb(255,250,205)", .true )
     clrName2all["LIGHTBLUE"           ] = ("LightBlue"           , "#add8e6", "rgb(173,216,230)", .true )
     clrName2all["LIGHTCORAL"          ] = ("LightCoral"          , "#f08080", "rgb(240,128,128)", .true )
     clrName2all["LIGHTCYAN"           ] = ("LightCyan"           , "#e0ffff", "rgb(224,255,255)", .true )
     clrName2all["LIGHTGOLDENRODYELLOW"] = ("LightGoldenRodYellow", "#fafad2", "rgb(250,250,210)", .true )
     clrName2all["LIGHTGRAY"           ] = ("LightGray"           , "#d3d3d3", "rgb(211,211,211)", .true )
     clrName2all["LIGHTGREEN"          ] = ("LightGreen"          , "#90ee90", "rgb(144,238,144)", .true )
     clrName2all["LIGHTGREY"           ] = ("LightGrey"           , "#d3d3d3", "rgb(211,211,211)", .true )
     clrName2all["LIGHTPINK"           ] = ("LightPink"           , "#ffb6c1", "rgb(255,182,193)", .true )
     clrName2all["LIGHTSALMON"         ] = ("LightSalmon"         , "#ffa07a", "rgb(255,160,122)", .true )
     clrName2all["LIGHTSEAGREEN"       ] = ("LightSeaGreen"       , "#20b2aa", "rgb( 32,178,170)", .true )
     clrName2all["LIGHTSKYBLUE"        ] = ("LightSkyBlue"        , "#87cefa", "rgb(135,206,250)", .true )
     clrName2all["LIGHTSLATEGRAY"      ] = ("LightSlateGray"      , "#778899", "rgb(119,136,153)", .true )
     clrName2all["LIGHTSLATEGREY"      ] = ("LightSlateGrey"      , "#778899", "rgb(119,136,153)", .true )
     clrName2all["LIGHTSTEELBLUE"      ] = ("LightSteelBlue"      , "#b0c4de", "rgb(176,196,222)", .true )
     clrName2all["LIGHTYELLOW"         ] = ("LightYellow"         , "#ffffe0", "rgb(255,255,224)", .true )
     clrName2all["LIME"                ] = ("Lime"                , "#00ff00", "rgb(  0,255,  0)", .true )
     clrName2all["LIMEGREEN"           ] = ("LimeGreen"           , "#32cd32", "rgb( 50,205, 50)", .true )
     clrName2all["LINEN"               ] = ("Linen"               , "#faf0e6", "rgb(250,240,230)", .true )
     clrName2all["MAGENTA"             ] = ("Magenta"             , "#ff00ff", "rgb(255,  0,255)", .true )
     clrName2all["MAROON"              ] = ("Maroon"              , "#800000", "rgb(128,  0,  0)", .true )
     clrName2all["MEDIUMAQUAMARINE"    ] = ("MediumAquaMarine"    , "#66cdaa", "rgb(102,205,170)", .true )
     clrName2all["MEDIUMBLUE"          ] = ("MediumBlue"          , "#0000cd", "rgb(  0,  0,205)", .true )
     clrName2all["MEDIUMORCHID"        ] = ("MediumOrchid"        , "#ba55d3", "rgb(186, 85,211)", .true )
     clrName2all["MEDIUMPURPLE"        ] = ("MediumPurple"        , "#9370db", "rgb(147,112,219)", .true )
     clrName2all["MEDIUMSEAGREEN"      ] = ("MediumSeaGreen"      , "#3cb371", "rgb( 60,179,113)", .true )
     clrName2all["MEDIUMSLATEBLUE"     ] = ("MediumSlateBlue"     , "#7b68ee", "rgb(123,104,238)", .true )
     clrName2all["MEDIUMSPRINGGREEN"   ] = ("MediumSpringGreen"   , "#00fa9a", "rgb(  0,250,154)", .true )
     clrName2all["MEDIUMTURQUOISE"     ] = ("MediumTurquoise"     , "#48d1cc", "rgb( 72,209,204)", .true )
     clrName2all["MEDIUMVIOLETRED"     ] = ("MediumVioletRed"     , "#c71585", "rgb(199, 21,133)", .true )
     clrName2all["MIDNIGHTBLUE"        ] = ("MidnightBlue"        , "#191970", "rgb( 25, 25,112)", .true )
     clrName2all["MINTCREAM"           ] = ("MintCream"           , "#f5fffa", "rgb(245,255,250)", .true )
     clrName2all["MISTYROSE"           ] = ("MistyRose"           , "#ffe4e1", "rgb(255,228,225)", .true )
     clrName2all["MOCCASIN"            ] = ("Moccasin"            , "#ffe4b5", "rgb(255,228,181)", .true )
     clrName2all["NAVAJOWHITE"         ] = ("NavajoWhite"         , "#ffdead", "rgb(255,222,173)", .true )
     clrName2all["NAVY"                ] = ("Navy"                , "#000080", "rgb(  0,  0,128)", .true )
     clrName2all["OLDLACE"             ] = ("OldLace"             , "#fdf5e6", "rgb(253,245,230)", .true )
     clrName2all["OLIVE"               ] = ("Olive"               , "#808000", "rgb(128,128,  0)", .true )
     clrName2all["OLIVEDRAB"           ] = ("OliveDrab"           , "#6b8e23", "rgb(107,142, 35)", .true )
     clrName2all["ORANGE"              ] = ("Orange"              , "#ffa500", "rgb(255,165,  0)", .true )
     clrName2all["ORANGERED"           ] = ("OrangeRed"           , "#ff4500", "rgb(255, 69,  0)", .true )
     clrName2all["ORCHID"              ] = ("Orchid"              , "#da70d6", "rgb(218,112,214)", .true )
     clrName2all["PALEGOLDENROD"       ] = ("PaleGoldenRod"       , "#eee8aa", "rgb(238,232,170)", .true )
     clrName2all["PALEGREEN"           ] = ("PaleGreen"           , "#98fb98", "rgb(152,251,152)", .true )
     clrName2all["PALETURQUOISE"       ] = ("PaleTurquoise"       , "#afeeee", "rgb(175,238,238)", .true )
     clrName2all["PALEVIOLETRED"       ] = ("PaleVioletRed"       , "#db7093", "rgb(219,112,147)", .true )
     clrName2all["PAPAYAWHIP"          ] = ("PapayaWhip"          , "#ffefd5", "rgb(255,239,213)", .true )
     clrName2all["PEACHPUFF"           ] = ("PeachPuff"           , "#ffdab9", "rgb(255,218,185)", .true )
     clrName2all["PERU"                ] = ("Peru"                , "#cd853f", "rgb(205,133, 63)", .true )
     clrName2all["PINK"                ] = ("Pink"                , "#ffc0cb", "rgb(255,192,203)", .true )
     clrName2all["PLUM"                ] = ("Plum"                , "#dda0dd", "rgb(221,160,221)", .true )
     clrName2all["POWDERBLUE"          ] = ("PowderBlue"          , "#b0e0e6", "rgb(176,224,230)", .true )
     clrName2all["PURPLE"              ] = ("Purple"              , "#800080", "rgb(128,  0,128)", .true )
     clrName2all["REBECCAPURPLE"       ] = ("RebeccaPurple"       , "#663399", "rgb(102, 51,153)", .false)
     clrName2all["RED"                 ] = ("Red"                 , "#ff0000", "rgb(255,  0,  0)", .true )
     clrName2all["ROSYBROWN"           ] = ("RosyBrown"           , "#bc8f8f", "rgb(188,143,143)", .true )
     clrName2all["ROYALBLUE"           ] = ("RoyalBlue"           , "#4169e1", "rgb( 65,105,225)", .true )
     clrName2all["SADDLEBROWN"         ] = ("SaddleBrown"         , "#8b4513", "rgb(139, 69, 19)", .true )
     clrName2all["SALMON"              ] = ("Salmon"              , "#fa8072", "rgb(250,128,114)", .true )
     clrName2all["SANDYBROWN"          ] = ("SandyBrown"          , "#f4a460", "rgb(244,164, 96)", .true )
     clrName2all["SEAGREEN"            ] = ("SeaGreen"            , "#2e8b57", "rgb( 46,139, 87)", .true )
     clrName2all["SEASHELL"            ] = ("SeaShell"            , "#fff5ee", "rgb(255,245,238)", .true )
     clrName2all["SIENNA"              ] = ("Sienna"              , "#a0522d", "rgb(160, 82, 45)", .true )
     clrName2all["SILVER"              ] = ("Silver"              , "#c0c0c0", "rgb(192,192,192)", .true )
     clrName2all["SKYBLUE"             ] = ("SkyBlue"             , "#87ceeb", "rgb(135,206,235)", .true )
     clrName2all["SLATEBLUE"           ] = ("SlateBlue"           , "#6a5acd", "rgb(106, 90,205)", .true )
     clrName2all["SLATEGRAY"           ] = ("SlateGray"           , "#708090", "rgb(112,128,144)", .true )
     clrName2all["SLATEGREY"           ] = ("SlateGrey"           , "#708090", "rgb(112,128,144)", .true )
     clrName2all["SNOW"                ] = ("Snow"                , "#fffafa", "rgb(255,250,250)", .true )
     clrName2all["SPRINGGREEN"         ] = ("SpringGreen"         , "#00ff7f", "rgb(  0,255,127)", .true )
     clrName2all["STEELBLUE"           ] = ("SteelBlue"           , "#4682b4", "rgb( 70,130,180)", .true )
     clrName2all["TAN"                 ] = ("Tan"                 , "#d2b48c", "rgb(210,180,140)", .true )
     clrName2all["TEAL"                ] = ("Teal"                , "#008080", "rgb(  0,128,128)", .true )
     clrName2all["THISTLE"             ] = ("Thistle"             , "#d8bfd8", "rgb(216,191,216)", .true )
     clrName2all["TOMATO"              ] = ("Tomato"              , "#ff6347", "rgb(255, 99, 71)", .true )
     clrName2all["TURQUOISE"           ] = ("Turquoise"           , "#40e0d0", "rgb( 64,224,208)", .true )
     clrName2all["VIOLET"              ] = ("Violet"              , "#ee82ee", "rgb(238,130,238)", .true )
     clrName2all["WHEAT"               ] = ("Wheat"               , "#f5deb3", "rgb(245,222,179)", .true )
     clrName2all["WHITE"               ] = ("White"               , "#ffffff", "rgb(255,255,255)", .true )
     clrName2all["WHITESMOKE"          ] = ("WhiteSmoke"          , "#f5f5f5", "rgb(245,245,245)", .true )
     clrName2all["YELLOW"              ] = ("Yellow"              , "#ffff00", "rgb(255,255,  0)", .true )
     clrName2all["YELLOWGREEN"         ] = ("YellowGreen"         , "#9acd32", "rgb(154,205, 50)", .true )

